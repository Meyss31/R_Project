library(readr)
appearances <- read_csv("~/ECC/S9/Tronc Commun/Visualisation/got-master/data/appearances.csv")
View(appearances)
library(readr)
appearances = read_csv('appearances.csv')
library(readr)
appearances = read_csv('data/appearances.csv')
library(readr)
appearances = read_csv('data/appearances.csv')
dim(appearances)
dim(appearances)
characters = read_csv('data/characters.csv')
dim(characters)
scenes = read_csv('data/scenes.csv')
episodes = read_csv('data/episodes.csv')
populations = read_csv('data/poopulations.csv')
populations = read_csv('data/populations.csv')
summary(appearances)
str(appearances)
#voir les infos de la data frame scenes
dim(scenes)
summary(scenes)
str(scenes)
names(appearances)
names(scenes)
#voir les intersections des data frames appearances et scenes
intersect(appearances, scenes)
#voir les intersections des data frames appearances et scenes
appearances %in% scenes
#voir les intersections des data frames appearances et scenes
names(appearances) %in% names(scenes)
intersect(names(appearances), names(scenes))
summary(scenes)
#Le nombre de personnages mortes dans toute la série
sum(names(appearances['nbdeath']))
#Le nombre de personnages mortes dans toute la série
names(appearances[names(appearances)=='nbdeath'])
#Le nombre de personnages mortes dans toute la série
names(appearances)[names(appearances)=='nbdeath']
#Le nombre de personnages mortes dans toute la série
names(appearances)[names(appearances)='nbdeath']
#Le nombre de personnages mortes dans toute la série
names(scenes[names(scenes)=='nbdeath'])
scenes['nbdeath']
sum(scenes['nbdeath'])
#Le nombre de personnages mortes dans la première saison
sum(scenes['nbdeath'], scenes$episodeId<=10)
#Le nombre de personnages mortes dans la première saison
sum(scenes['nbdeath'] & scenes$episodeId<=10)
#Le nombre de personnages mortes dans la première saison
sum(scenes['nbdeath'][scenes$episodeId<=10])
#Le nombre de personnages mortes dans la première saison
sum(scenes$nbdeath[scenes$episodeId<=10])
#Le nombre de personnages mortes dans la première saison
sum(scenes$nbdeath &scenes$episodeId<=10)
#Le plus grand meurtier de la serie
summary(characters)
help(table)
sort(characters, by characters$killedBy)
characters %<% sortedby(characters$killedBy)
sort(table(characters$killedBy), decreasing = TRUE)
sort(table(characters$killedBy), decreasing = TRUE).head(5)
head(sort(table(characters$killedBy), decreasing = TRUE))
head(sort(table(characters$killedBy), decreasing = TRUE), '/n')
head(sort(table(characters$killedBy), decreasing = TRUE))
sort(table(characters$killedBy), decreasing = TRUE)[:5]
s=sort(table(characters$killedBy), decreasing = TRUE)
type(s)
class(s)
s[:5]
s[:5:]
s[::5]
sort(table(characters$killedBy), decreasing = TRUE)[1:5]
sort(table(characters$killedBy), decreasing = TRUE)[2:6]
1
sort(table(characters$killedBy), decreasing = TRUE)[1:5]
#la durée de la scene la plu long et l'Id de l'épisode correspondante
sort(table(scenes$duration))[1]
#la durée de la scene la plu long et l'Id de l'épisode correspondante
sort(table(scenes$duration))[1:2]
#la durée de la scene la plu long et l'Id de l'épisode correspondante
sort(table(scenes$duration), decreasing = TRUE)[1:2]
#la durée de la scene la plus long et l'Id de l'épisode correspondante
scenes %>% groupby(duration)
#la durée de la scene la plus long et l'Id de l'épisode correspondante
which.max(scenes$duration)
scenes$episodeId(which.max(scenes$duration))
scenes$episodeId[which.max(scenes$duration)]
scenes[which.max(scenes$duration)]
names(scenes)[which.max(scenes$duration)]
names(scenes)[scens$duration = which.max(scenes$duration)]
names(scenes)[scens$duration == which.max(scenes$duration)]
names(scenes)[scenes$duration == which.max(scenes$duration)]
scenes[scenes$duration == which.max(scenes$duration)]
scenes$episodeId[which.max(scenes$duration))
scenes$episodeId[which.max(scenes$duration)]
names(scenes)[scenes$episodeId[which.max(scenes$duration)]]
names(scenes)[names(scenes)[which.max(scenes$duration)]]
names(scenes)(names(scenes)[which.max(scenes$duration)])
scenes[which.max(scenes$duration),]
scenes[which.max(scenes$duration)]
,
scenes[which.max(scenes$duration),]
#la durée de la scene la plus long et l'Id de l'épisode correspondante
print(which.max(scenes$duration), scenes$episodeId[which.max(scenes$duration)])
#la durée de la scene la plus long et l'Id de l'épisode correspondante
scenes$episodeId[which.max(scenes$duration)]
which.max(scenes$duration)
print("l'épisode correspondante est :" scenes$episodeId[which.max(scenes$duration)])
print("la durér de la scene la plus longue est :" which.max(scenes$duration))
print("la durér de la scene la plus longue est :") which.max(scenes$duration)
print("l'épisode correspondante est :") scenes$episodeId[which.max(scenes$duration)]
print("la durér de la scene la plus longue est :") which.max(scenes$duration)
print("l'épisode correspondante est :")
scenes$episodeId[which.max(scenes$duration)]
print("la durér de la scene la plus longue est :")
which.max(scenes$duration)
print("l'épisode correspondante est :", scenes$episodeId[which.max(scenes$duration)])
print("la durér de la scene la plus longue est :", which.max(scenes$duration))
a=5
b=6
print('la valeur de a est:' a)
print('la valeur de a est:', a)
print(a)
print('la valeur de a est:', a)
vue('la valeur de a est:', a)
View(scenes)
View('la valeur de a est:', a)
print('la valeur de a est:'; a)
help (print)
print("l'épisode correspondante est :", scenes$episodeId[which.max(scenes$duration), "\n"])
print("l'épisode correspondante est :", scenes$episodeId[which.max(scenes$duration), sep =""])
print("l'épisode correspondante est :", scenes$episodeId[which.max(scenes$duration), sep =" "])
print(paste0('la valeur de a est:'; a))
print(cat('la valeur de a est:'; a))
cat('la valeur de a est:'; a)
message('la valeur de a est:'; a)
print(paste0('la valeur de a est:', a))
cat('la valeur de a est:', a)
message('la valeur de a est:', a)
print(cat('la valeur de a est:', a))
print(paste0("l'épisode correspondante est :", scenes$episodeId[which.max(scenes$duration)]))
print(paste0("la durér de la scene la plus longue est :", which.max(scenes$duration)))
print(paste0("la durér de la scene la plus longue est :", scenes$duration[which.max(scenes$duration)]))
library(dplyr)
print(paste0("l'épisode correspondante est :", scenes %<% select(episodeId, which.max(duration))))
print(paste0("l'épisode correspondante est :", scenes %>% select(episodeId, which.max(duration))))
print(paste0("l'épisode correspondante est :", scenes %>% select(episodeId, which.max(scenes %>% duration))))
print(paste0("l'épisode correspondante est :", scenes %>% select(episodeId, which.max(scenes$duration))))
print(paste0("l'épisode correspondante est :", scenes %>% select(episodeId) %>% which.max(scenes$duration)))
help (duration)
print(paste0("l'épisode correspondante est :", scenes %>% arrange(desc(duration)) %>% head(1)))
print(paste0("l'épisode correspondante est :", scenes$episodeId %>% arrange(desc(duration)) %>% head(1)))
scenes %>% arrange(desc(duration)) %>% head(1)
scenes$episodeId[scenes %>% arrange(desc(duration))]
scenes$episodeId[scenes %>% arrange(desc(duration)) %>% head(1)]
scenes %>% arrange(desc(duration)) %>% head(1)[scenes$episodeId]
scenes %>% arrange(desc(duration)) %>% head(1)[episodeId]
View(appearances)
View(characters)
View(scenes)
View(episodes)
View(appearances)
View(populations)
View(populations)
View(characters)
View(populations)
View(scenes)
View(populations)
View(scenes)
View(populations)
View(scenes)
scenes$location
View(scenes %>% count(location)
scenes %>% count(location)
scenes %>% count(location)
scenes %<% count(location)
count(scenes$location)
View(populations)
#La même question en utilisant dplyr
library(dplyr)
scenes %<% count(location)
library(dplyr)
scenes %<% count(location)
scenes %>% count(location)
View(characters)
View(appearances)
View(episodes)
